<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Scala case class学习</title>
      <link href="/650286525/"/>
      <url>/650286525/</url>
      <content type="html"><![CDATA[<p>本文介绍了case class和以及case class在模式匹配中如何使用。</p><a id="more"></a><h2 id="case-class介绍"><a href="#case-class介绍" class="headerlink" title="case class介绍"></a>case class介绍</h2><p>样例类（case class）适合用于不可变的数据。它是一种特殊的类，能够被优化以用于模式匹配。</p><p>case class定义<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printBookName</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">BookTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> book = <span class="type">Book</span>(<span class="string">"Java入门到放弃"</span>)</span><br><span class="line">    book.printBookName()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在实例化case class类时，不需要使用关键字New，case class类编译成class文件之后会自动生成apply方法，这个方法负责对象的创建。<br>通过<a href="https://github.com/java-decompiler/jd-gui" target="_blank" rel="noopener">JD-GUI</a>工具可以查看编译后的.class文件（有兴趣的可以自己看下）。<br>Scala自动为Book生成了apply静态方法，里面调用了Book$类的apply方法用来生成Book对象。</p><p><img src="https://upload-images.jianshu.io/upload_images/14444552-4dac6df995accaf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Book$类的截图</p><p><img src="https://upload-images.jianshu.io/upload_images/14444552-4d763e6ba2fc13c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>case class类的参数都是可以直接访问的val（不能被修改），但是实际上编译成的class字节码会对book.name转成book.name()方法调用。如下图所示，name声明的时候是加了final关键字，并且生成了对应的name()方法。<br><img src="https://upload-images.jianshu.io/upload_images/14444552-04d16c5ecf0d558f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>printBookName()方法中使用到的book.name实际上是调用的name()方法。<br><img src="https://upload-images.jianshu.io/upload_images/14444552-438d3c7defa3316b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>模式匹配是检查某个值（value）是否匹配某一个模式的机制，一个成功的匹配同时会将匹配值解构为其组成部分。它是Java中的switch语句的升级版。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>一个模式匹配语句包括一个待匹配的值，match关键字，以及至少一个case语句。示例如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matchTest</span></span>(x: <span class="type">Int</span>): <span class="type">String</span> = x <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">"one"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> =&gt; <span class="string">"two"</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">"many"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="case-class的匹配"><a href="#case-class的匹配" class="headerlink" title="case class的匹配"></a>case class的匹配</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Notification</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Email</span>(<span class="params">sender: <span class="type">String</span>, title: <span class="type">String</span>, body: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Notification</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">SMS</span>(<span class="params">caller: <span class="type">String</span>, message: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Notification</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">VoiceRecording</span>(<span class="params">contactName: <span class="type">String</span>, link: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Notification</span></span></span><br></pre></td></tr></table></figure><p>Notification 是一个虚基类，它有三个具体的子类Email, SMS和VoiceRecording，我们可以在这些Case Class类上使用模式匹配：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showNotification</span></span>(notification: <span class="type">Notification</span>): <span class="type">String</span> = &#123;</span><br><span class="line">  notification <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Email</span>(email, title, _) =&gt;</span><br><span class="line">      <span class="string">s"You got an email from <span class="subst">$email</span> with title: <span class="subst">$title</span>"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">SMS</span>(number, message) =&gt;</span><br><span class="line">      <span class="string">s"You got an SMS from <span class="subst">$number</span>! Message: <span class="subst">$message</span>"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">VoiceRecording</span>(name, link) =&gt;</span><br><span class="line">      <span class="string">s"you received a Voice Recording from <span class="subst">$name</span>! Link: <span class="subst">$link</span>"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> someSms = <span class="type">SMS</span>(<span class="string">"12345"</span>, <span class="string">"Are you there?"</span>)</span><br><span class="line"><span class="keyword">val</span> someVoiceRecording = <span class="type">VoiceRecording</span>(<span class="string">"Tom"</span>, <span class="string">"voicerecording.org/id/123"</span>)</span><br><span class="line"></span><br><span class="line">println(showNotification(someSms))  <span class="comment">// prints You got an SMS from 12345! Message: Are you there?</span></span><br><span class="line">println(showNotification(someVoiceRecording))  <span class="comment">// you received a Voice Recording from Tom! Click the link to hear it: voicerecording.org/id/123</span></span><br></pre></td></tr></table></figure><hr><p>showNotification函数接受一个抽象类Notification对象作为输入参数，然后匹配其具体类型。（也就是判断它是一个Email，SMS，还是VoiceRecording）。在case Email(email, title, _ )中，对象的email和title属性在返回值中被使用，而body属性则被忽略，故使用_代替。<br>另外需要注意的一点是case Email(email, title, _)语句实际上是使用了Email提取器对象的unApply方法，这个方法也是Scala编译字节码的时候自动生成的，它会去提取匹配到的Email对象的sender和title属性填充到email和title属性上。<br>showNotification方法还可以等价写成下面这种形式，只匹配类型，而不使用Scala的提取器方式。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showNotification</span></span>(notification: <span class="type">Notification</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    notification <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> e: <span class="type">Email</span> =&gt;</span><br><span class="line">        <span class="string">s"You got an email from <span class="subst">$&#123;e.sender&#125;</span> with title: <span class="subst">$&#123;e.title&#125;</span>"</span></span><br><span class="line">      <span class="keyword">case</span> s: <span class="type">SMS</span> =&gt;</span><br><span class="line">        <span class="string">s"You got an SMS from <span class="subst">$&#123;s.caller&#125;</span>! Message: <span class="subst">$&#123;s.message&#125;</span>"</span></span><br><span class="line">      <span class="keyword">case</span> vr: <span class="type">VoiceRecording</span> =&gt;</span><br><span class="line">        <span class="string">s"you received a Voice Recording from <span class="subst">$&#123;vr.contactName&#125;</span>! Link: <span class="subst">$&#123;vr.link&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="模式守卫"><a href="#模式守卫" class="headerlink" title="模式守卫"></a>模式守卫</h3><p>为了让匹配更加具体，可以使用模式守卫，也就是在模式后面加上if表达式。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showImportantNotification</span></span>(notification: <span class="type">Notification</span>, importantPeopleInfo: <span class="type">Seq</span>[<span class="type">String</span>]): <span class="type">String</span> = &#123;</span><br><span class="line">  notification <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Email</span>(email, _, _) <span class="keyword">if</span> importantPeopleInfo.contains(email) =&gt;</span><br><span class="line">      <span class="string">"You got an email from special someone!"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">SMS</span>(number, _) <span class="keyword">if</span> importantPeopleInfo.contains(number) =&gt;</span><br><span class="line">      <span class="string">"You got an SMS from special someone!"</span></span><br><span class="line">    <span class="keyword">case</span> other =&gt;</span><br><span class="line">      showNotification(other) <span class="comment">// nothing special, delegate to our original showNotification function</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> importantPeopleInfo = <span class="type">Seq</span>(<span class="string">"867-5309"</span>, <span class="string">"jenny@gmail.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> someSms = <span class="type">SMS</span>(<span class="string">"867-5309"</span>, <span class="string">"Are you there?"</span>)</span><br><span class="line"><span class="keyword">val</span> someVoiceRecording = <span class="type">VoiceRecording</span>(<span class="string">"Tom"</span>, <span class="string">"vr.org/id/123"</span>)</span><br><span class="line"><span class="keyword">val</span> importantEmail = <span class="type">Email</span>(<span class="string">"jenny@gmail.com"</span>, <span class="string">"Drinks tonight?"</span>, <span class="string">"I'm free after 5!"</span>)</span><br><span class="line"><span class="keyword">val</span> importantSms = <span class="type">SMS</span>(<span class="string">"867-5309"</span>, <span class="string">"I'm here! Where are you?"</span>)</span><br><span class="line"></span><br><span class="line">println(showImportantNotification(someSms, importantPeopleInfo)) <span class="comment">// You got an SMS from special someone!</span></span><br><span class="line">println(showImportantNotification(someVoiceRecording, importantPeopleInfo)) <span class="comment">//you received a Voice Recording from Tom! Link: vr.org/id/123</span></span><br><span class="line">println(showImportantNotification(importantEmail, importantPeopleInfo)) <span class="comment">// You got an email from special someone!</span></span><br><span class="line">println(showImportantNotification(importantSms, importantPeopleInfo)) <span class="comment">//You got an SMS from special someone!</span></span><br></pre></td></tr></table></figure><hr><p>在case Email(email, _ , _ ) if importantPeopleInfo.contains(email)中，除了要求notification是Email类型外，还需要email在重要人物列表importantPeopleInfo中，才会匹配到该模式。</p><h3 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h3><p>特质（trait）和类（class）可以用sealed标记为密封的，这意味着其所有子类都必须与之定义在相同文件中，从而保证所有子类型都是已知的。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Furniture</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Couch</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Furniture</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Chair</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Furniture</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">findPlaceToSit</span>(<span class="params">piece: <span class="type">Furniture</span></span>)</span>: <span class="type">String</span> = piece <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> a: <span class="type">Couch</span> =&gt; <span class="string">"Lie on the couch"</span></span><br><span class="line">  <span class="keyword">case</span> b: <span class="type">Chair</span> =&gt; <span class="string">"Sit on the chair"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://docs.scala-lang.org/zh-cn/tour/case-classes.html" target="_blank" rel="noopener">案例类 https://docs.scala-lang.org/zh-cn/tour/case-classes.html</a></li><li><a href="https://docs.scala-lang.org/zh-cn/tour/pattern-matching.html" target="_blank" rel="noopener">模式匹配 https://docs.scala-lang.org/zh-cn/tour/pattern-matching.html</a></li><li><a href="https://blog.csdn.net/lovehuangjiaju/article/details/47176829" target="_blank" rel="noopener">https://blog.csdn.net/lovehuangjiaju/article/details/47176829</a></li></ol>]]></content>
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala </tag>
            
            <tag> case class </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>idea搭建osgi项目开发学习</title>
      <link href="/1364452984/"/>
      <url>/1364452984/</url>
      <content type="html"><![CDATA[<p>本文介绍了用Idea搭建OSGI项目开发的过程，演示使用的JDK8，Equinor OSGI Framework。<br><a id="more"></a></p><p>###OSGI简介<br>OSGI的全称是Open Service Gateway Initiative，直译就是开放服务网关。最新的OSGI定义是The Dynamic Module System for Java，即面向java的动态模块化系统。<br>在传统Web开发中，我们为了进行功能的分离，经常会进行模块划分，比如基础信息模块交由A和B做，接口信息模块交由C和D做。最终，再汇集到一起，组成一个完整的项目。在整个流程中，我们做到的只是逻辑上的解耦，最终这些模块还是运行于同一服务器上，共享同一个classpath。这时就会出现一个局限性问题，比如现在接口规范改了，只想停掉接口信息模块，而基础信息模块仍能正常运行，这显然是无法实现的。而使用OSGI可以完美解决这个问题，OSGI是基于模块（Bundle）驱动的，每个模块都有属于自己的classpath和类加载器，模块之间通过服务注册和发现进行关联，每个模块有着自己独立的生命周期，我们可以动态地对模块进行加载、卸载、更新。摘自<a href="https://www.jianshu.com/p/11dcea36b957。" target="_blank" rel="noopener">https://www.jianshu.com/p/11dcea36b957。</a><br>OSGI可以理解成是JVM单进程内的SOA，当然也支持多进程分布式的模块之间的调用。</p><h3 id="Equinor下载"><a href="#Equinor下载" class="headerlink" title="Equinor下载"></a>Equinor下载</h3><p>下载地址：<a href="https://download.eclipse.org/equinox/" target="_blank" rel="noopener">https://download.eclipse.org/equinox/</a><br>本文下载的是equinox-SDK-4.11.zip，下载后进行解压，后面需要用到这个解压目录。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-43e97794f34784e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="Idea创建OSGI工程"><a href="#Idea创建OSGI工程" class="headerlink" title="Idea创建OSGI工程"></a>Idea创建OSGI工程</h3><p>File -&gt; New -&gt; Project，选择Java，点击Next，创建一个空工程。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-b94c63722b02e2e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>继续点击Next。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-bb30148d93e1a871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>填写项目名称，这里叫osgi_demo。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-8041cf63191bdc4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>分别创建api、server、client三个OSGI模块。<br>创建模块时勾选OSGI作为开发环境，Use library从刚才下载的Equinox解压的目录下的plugins目录中选择org.eclipse.osgi_3.13.300.v20190218-1622.jar。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-a7389ef8bfdc5ae9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>创建模块完成之后，打开idea的preferences，在Languages &amp; Frameworks找到OSGI Framework Instances选项。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-0bcd32ec1db6364e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>添加Equinox，Home directory选择刚才解压的Equinox目录。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-9a550becba7fd80a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="编写演示代码"><a href="#编写演示代码" class="headerlink" title="编写演示代码"></a>编写演示代码</h3><p>结构如下图<br><img src="https://upload-images.jianshu.io/upload_images/2113235-c17d06d2826cab33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>api模块中定义接口类IHelloService<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package osgi.demo.api;</span><br><span class="line"></span><br><span class="line">public interface IHelloService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 和某人打招呼</span><br><span class="line">     * @param somebody</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String sayHello(String somebody);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>server模块接口实现类HelloServiceImpl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package osgi.demo.server;</span><br><span class="line"></span><br><span class="line">import osgi.demo.api.IHelloService;</span><br><span class="line"></span><br><span class="line">public class HelloServiceImpl implements IHelloService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String sayHello(String somebody) &#123;</span><br><span class="line">        return &quot;hello &quot; + somebody;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server模块服务注册类HelloServerBundle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package osgi.demo.server;</span><br><span class="line"></span><br><span class="line">import org.osgi.framework.BundleActivator;</span><br><span class="line">import org.osgi.framework.BundleContext;</span><br><span class="line">import osgi.demo.api.IHelloService;</span><br><span class="line"></span><br><span class="line">import java.util.Dictionary;</span><br><span class="line">import java.util.Hashtable;</span><br><span class="line"></span><br><span class="line">public class HelloServerBundle implements BundleActivator &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start(BundleContext bundleContext) throws Exception &#123;</span><br><span class="line">        IHelloService service = new HelloServiceImpl();</span><br><span class="line">        Dictionary&lt;String , Object&gt; properties = new Hashtable&lt;&gt;();</span><br><span class="line">        //服务注册</span><br><span class="line">        bundleContext.registerService(IHelloService.class, service, properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void stop(BundleContext bundleContext) throws Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>client模块调用服务类HelloClientBundle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package osgi.demo.client;</span><br><span class="line"></span><br><span class="line">import org.osgi.framework.BundleActivator;</span><br><span class="line">import org.osgi.framework.BundleContext;</span><br><span class="line">import org.osgi.framework.ServiceReference;</span><br><span class="line">import osgi.demo.api.IHelloService;</span><br><span class="line"></span><br><span class="line">import java.util.Objects;</span><br><span class="line"></span><br><span class="line">public class HelloClientBundle implements BundleActivator &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void start(BundleContext bundleContext) throws Exception &#123;</span><br><span class="line">        //获取到IHelloService服务引用</span><br><span class="line">        ServiceReference&lt;IHelloService&gt; reference = bundleContext.getServiceReference(IHelloService.class);</span><br><span class="line">        if (Objects.nonNull(reference)) &#123;</span><br><span class="line">            //发现服务</span><br><span class="line">            IHelloService service = bundleContext.getService(reference);</span><br><span class="line">            if (Objects.nonNull(service)) &#123;</span><br><span class="line">                System.out.println(service.sayHello(&quot;jecyhw&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">            //注销服务</span><br><span class="line">            bundleContext.ungetService(reference);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void stop(BundleContext bundleContext) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="各模块OGSI配置"><a href="#各模块OGSI配置" class="headerlink" title="各模块OGSI配置"></a>各模块OGSI配置</h3><p>api模块配置，导出接口定义所在包osgi.demo.api（Additional properties是bundle的相关属性配置的地方）。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-d856e844e1d643bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>server模块配置，配置HelloServerBundle类作为该bundle的启动类。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-b169fd64ecdc2296.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>client模块配置，配置HelloClientBundle类作为该bundle的启动类。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-738a8792facef2e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="osgi启动配置并运行"><a href="#osgi启动配置并运行" class="headerlink" title="osgi启动配置并运行"></a>osgi启动配置并运行</h3><p>选择Edit Configurations。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-291126f2deb669b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>添加OSGI Bundles。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-47ae7baffd39f90a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>配置如下。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-fa6d9dfc3bdcf2c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>client模块调用了server的服务，按照依赖关系，server模块需要先启动，把服务注册在osgi框架中，client模块才能调用到，Start level是用来定义bundle模块的启动优先级，值越小，启动优先级越高。</p></blockquote><blockquote><p>Framework start level是整个osgi框架的启动级别，也就是整个项目的启动级别，大于这个值的bundle模块是不会被启动的。如果这个值为1，client模块的启动级别为2，client模块是不会被启动的，可以调整试试。</p></blockquote><p>点击OK之后，就可以运行了。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-0048aa3657fbb7f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>运行结果截图。<br><img src="https://upload-images.jianshu.io/upload_images/2113235-e5e6a863ef10c162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>###参考资料<br><a href="https://www.jianshu.com/p/11dcea36b957" target="_blank" rel="noopener">Java模块化之路 —— OSGI介绍</a><br>深入理解OSGi:Equinox原理、应用与最佳实践</p>]]></content>
      
      <categories>
          
          <category> osgi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> osgi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kafka简介</title>
      <link href="/3578637002/"/>
      <url>/3578637002/</url>
      <content type="html"><![CDATA[<p>Kafka是一个高吞吐量、分布式的发布-订阅消息系统。它最初由LinkedIn公司开发，后来成为Apache项目的一部分。Kafka核心模块使用Scala语言开发，支持多语言（java、c/c++、python、go、erlang、node.js）客户端，具有水平扩展和高吞吐量等特性被广泛使用。<br><a id="more"></a><br>文章全部摘自《Kafka入门与实践》一书。</p><h3 id="Kafka背景"><a href="#Kafka背景" class="headerlink" title="Kafka背景"></a>Kafka背景</h3><p>在海量数据时代下，如何高效地存储、分析、处理和挖掘海量数据已成为技术研究领域的热点和难点问题。如何采集和运营管理、分析这些数据是大数据处理中一个至关重要的环节，这就需要相应的基础设施提供支持。Kafka就是当前流行的一款非常优秀的消息系统。</p><p>Kafka是一款开源的、轻量级的、分布式、可分区和具有复制备份的、基于ZooKeeper协调管理的分布式流平台的功能强大的消息系统。与传统的消息系统相比，Kafka能够很好地处理活跃的流数据，使得数据在各个子系统中高性能、低延迟地不停流转。</p><p>Kafka作为一个流处理平台，必须必备一下3个关键特性。</p><ol><li>能够发布和订阅流数据</li><li>存储流数据时提供相应的容错机制</li><li>当流数据到达时能够被及时处理</li></ol><h3 id="Kafka-基本结构"><a href="#Kafka-基本结构" class="headerlink" title="Kafka 基本结构"></a>Kafka 基本结构</h3><p>Kafka最基本的结构有生成者和消费者，生产者负责生产消息，将消息写入Kafka集群，消费者从Kafka集群中拉取消息。<br><img src="https://upload-images.jianshu.io/upload_images/14444552-8d05b8b1e68b302a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Kafka消息系统最基本的体系结构"></p><h3 id="Kafka基本概念"><a href="#Kafka基本概念" class="headerlink" title="Kafka基本概念"></a>Kafka基本概念</h3><h4 id="1-主题"><a href="#1-主题" class="headerlink" title="1.主题"></a>1.主题</h4><p>Kafka将一组消息抽象成一个主题（Topic），一个主题就是对消息的一个分类。生产者将消息发送到指定主题，消费者订阅主题进行消费。</p><h4 id="2-消息"><a href="#2-消息" class="headerlink" title="2.消息"></a>2.消息</h4><p>消息是Kafka通信的基本单位，由一个固定长度的消息头和一个可变长度的消息体构成。</p><h4 id="3-分区和副本"><a href="#3-分区和副本" class="headerlink" title="3.分区和副本"></a>3.分区和副本</h4><p>Kafka将一组消息归纳为一个主题，而每个主题又被分成一个或多个分区（Partiton）。每个分区由一系列有序、不可变的消息组成，是一个有序队列。</p><p>每个分区在物理上对应一个文件夹，分区的命名规则为主题名称后接”-“连接符，之后再接分区编号，分区编号从0开始。每个分区有一至多个副本（Replica），分区的副本分布在集群的不同代理上，以提高可用性。</p><p>Kafka只能保证一个分区之内消息的有序性，并不能保证跨分区消息的有序性。每条消息被追加到相应的分区中，是顺序写磁盘，因此效率非常高。Kafka提供了两种删除老数据的策略，一是基于消息已存储的时间长度，二是基于分区的大小。</p><h4 id="4-Leader副本和Follower副本"><a href="#4-Leader副本和Follower副本" class="headerlink" title="4.Leader副本和Follower副本"></a>4.Leader副本和Follower副本</h4><p>Kafka要保证一个分区的多个副本之间数据的一致性，Kafka会选择该分区的一个副本作为Leader副本，而其它副本为Follower副本，只有Leader副本才负责处理客户端读/写请求，Follower副本从Leader副本同步数据。如果Leader失效，通过相应的选举算法将从其它Follower副本中选出新的Leader副本。</p><h4 id="5-偏移量"><a href="#5-偏移量" class="headerlink" title="5.偏移量"></a>5.偏移量</h4><p>任何发布到分区的消息会被直接追加到日志文件的尾部，而每条消息在日志文件中的位置都会对应一个按序递增的偏移量。偏移量是一个分区下严格有序的逻辑值，不是消息在磁盘上的物理位置。消费者可以通过控制消息偏移量来对消息进行消费。</p><h4 id="6-日志段"><a href="#6-日志段" class="headerlink" title="6.日志段"></a>6.日志段</h4><p>一个日志又被划分为多个日志段（LogSegment），日志端是Kafka日志对象分片的最小单位。日志段是一个逻辑概念，一个日志段对应磁盘上一个具体日志文件和两个索引文件。日志文件是以”.log”为文件名后缀的数据文件，用于保存消息实际数据。两个索引文件分别以”.index”和”.timeindex”作为文件名后缀，分别表示消息偏移量索引文件和消息时间戳索引文件。</p><h4 id="7-代理"><a href="#7-代理" class="headerlink" title="7.代理"></a>7.代理</h4><p>Kafka集群是由一个或多个Kafka实例构成，每个Kafka实例称为代理（Broker），通常也称代理为Kafka服务器（KafkaServer）。每个代理都有唯一的标识id。</p><h4 id="8-生产者"><a href="#8-生产者" class="headerlink" title="8.生产者"></a>8.生产者</h4><p>生产者（Producer）负责将消息发送给代理，也就是向Kafka代理发送消息的客户端。</p><h4 id="9-消费者和消费组"><a href="#9-消费者和消费组" class="headerlink" title="9.消费者和消费组"></a>9.消费者和消费组</h4><p>消费者（Consumer）以拉取（pull）方式拉取数据，它是消费的客户端。在Kafka中每一个消费者都属于一个特定消费组（ConsumerGroup），可以为每个消费者指定一个消费组。每个消费者也有一个全局唯一的id。同一个主题的一条消息只能被同一个消费组下某一个消费者消费，不同消费组的消费者可同时消费该消息。</p><h4 id="10-ISR"><a href="#10-ISR" class="headerlink" title="10. ISR"></a>10. ISR</h4><p>Kafka在ZooKeeper中动态维护了一个ISR（In-sync Replica），即保存同步的副本列表，该列表中保存的是于leader副本保持消息同步的所有副本对应的代理节点id。如果一个Follower副本宕机或是落后太多，该Follower副本节点将从ISR列表中移除。</p><h4 id="11-ZooKeeper"><a href="#11-ZooKeeper" class="headerlink" title="11.ZooKeeper"></a>11.ZooKeeper</h4><p>Kafka利用ZooKeeper保存相应元数据信息，Kafka元数据信息包括如代理节点信息、Kafka集群信息、旧版消费者信息及其消费偏移量信息、主题信息、分区状态信息、分区副本分配方案信息、动态配置信息等。<br><img src="https://upload-images.jianshu.io/upload_images/14444552-ac2435ae8e7efe21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kafka的集群结构"></p><h3 id="Kafka设计概述"><a href="#Kafka设计概述" class="headerlink" title="Kafka设计概述"></a>Kafka设计概述</h3><h4 id="Kafka设计动机"><a href="#Kafka设计动机" class="headerlink" title="Kafka设计动机"></a>Kafka设计动机</h4><p>Kafka的设计初衷是使Kafka能够成为统一、实时处理大规模数据的平台。为了达到这个目标，Kafka必须支持以下几个应用场景。</p><ol><li>具有高吞吐量来支持诸如实时的日志集</li><li>能够很好地处理大量积压的数据，以便能够周期性地加载离线数据进行处理</li><li>能够低延迟的处理传统消息应用场景</li><li>能够支持分区、分布式，实时地处理消息，同时具有容错保障机制</li></ol><h4 id="Kafka特性"><a href="#Kafka特性" class="headerlink" title="Kafka特性"></a>Kafka特性</h4><ol><li>消息持久化</li><li>高吞吐量</li><li>扩展性</li><li>多客户端支持</li><li>Kafka Streams</li><li>安全机制</li><li>数据备份</li><li>轻量级</li><li>消息压缩</li></ol><h4 id="Kafka应用场景"><a href="#Kafka应用场景" class="headerlink" title="Kafka应用场景"></a>Kafka应用场景</h4><ol><li>消息系统</li><li>应用监控</li><li>网站用户行为追踪</li><li>流处理</li><li>持久性日志</li></ol>]]></content>
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo使用</title>
      <link href="/1947940652/"/>
      <url>/1947940652/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git更新forked的项目</title>
      <link href="/2518201122/"/>
      <url>/2518201122/</url>
      <content type="html"><![CDATA[<p>如何更新forked过来的项目。<br><a id="more"></a><br>方法如下：</p><ol><li><p>添加原项目的remote源,只需要添加一次就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream git@github.com:soimort/you-get.git</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">2. 将本地修改的commit下</span><br><span class="line"></span><br><span class="line">3. push前执行</span><br><span class="line">``` </span><br><span class="line">git remote update upstream</span><br><span class="line">git checkout &#123;branch name&#125;</span><br><span class="line">git rebase upstream/&#123;branch name&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后进行push</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &#123;branch name&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker出现Memory limited without swap</title>
      <link href="/2808712848/"/>
      <url>/2808712848/</url>
      <content type="html"><![CDATA[<p>ubuntu下docker出现 <code>WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.</code><br><a id="more"></a></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>编辑 <code>/etc/default/grub</code> 文件，找到 <code>GRUB_CMDLINE_LINUX</code>,修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX=&quot;cgroup_enable=memory swapaccount=1&quot;</span><br></pre></td></tr></table></figure></p><p>执行 <code>sudo update-grub</code> ,然后重启电脑</p>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu16.04设置python3默认</title>
      <link href="/2379415734/"/>
      <url>/2379415734/</url>
      <content type="html"><![CDATA[<p>ubuntu16.04自带有python2和python3，如何将python3设置为默认。<br><a id="more"></a><br>执行下面两个命令即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure></p><p>如果要切换到python其他版本，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu执行apt update出现Aborted (core dumped)错误</title>
      <link href="/2007401021/"/>
      <url>/2007401021/</url>
      <content type="html"><![CDATA[<p>ubuntu执行sudo apt update出现下面错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Aborted (core dumped)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">E: Problem executing scripts APT::Update::Post-Invoke-Success &apos;if /usr/bin/test -w /var/cache/app-info -a -e /usr/bin/appstreamcli; then appstreamcli refresh &gt; /dev/null; fi&apos;</span><br><span class="line">E: Sub-process returned an error code</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>解决方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pkill -KILL appstreamcli</span><br><span class="line">wget -P /tmp https://launchpad.net/ubuntu/+archive/primary/+files/appstream_0.9.4-1ubuntu1_amd64.deb https://launchpad.net/ubuntu/+archive/primary/+files/libappstream3_0.9.4-1ubuntu1_amd64.deb</span><br><span class="line">sudo dpkg -i /tmp/appstream_0.9.4-1ubuntu1_amd64.deb /tmp/libappstream3_0.9.4-1ubuntu1_amd64.deb</span><br></pre></td></tr></table></figure></p><p>再重新执行<br><code>sudo apt-get update</code></p>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Enable File Watcher to compile SCSS to CSS</title>
      <link href="/958030140/"/>
      <url>/958030140/</url>
      <content type="html"><![CDATA[<p>WebStorm设置Enable File Watcher to compile SCSS to CSS<br><a id="more"></a></p><h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><p>下载 <code>ruby</code> 并安装，下载地址为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.ruby-lang.org/en/downloads/</span><br></pre></td></tr></table></figure></p><h3 id="安装sass"><a href="#安装sass" class="headerlink" title="安装sass"></a>安装sass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install sass</span><br></pre></td></tr></table></figure><p>如果出现下面错误</p><blockquote><p> SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (<a href="https://api.rubygems.org/specs.4.8.gz" target="_blank" rel="noopener">https://api.rubygems.org/specs.4.8.gz</a>)</p></blockquote><p>更新下源，再重新安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line">gem sources -a http://rubygems.org/</span><br></pre></td></tr></table></figure></p><h3 id="配置FileWatcher"><a href="#配置FileWatcher" class="headerlink" title="配置FileWatcher"></a>配置FileWatcher</h3><p>如下图所示，选择 <code>SCSS</code><br><img src="/958030140/a1a3cf17.png" alt="进入FileWatcher"><br><code>Program</code> 那进入 <code>ruby</code> 安装目录的 <code>bin</code> 目录下，选择scss.bat。（如果是Sass就选择sass.bat）<br><img src="/958030140/7ccbd08f.png" alt="配置scss.bat"></p>]]></content>
      
      <categories>
          
          <category> WebStorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebStorm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx swagger问题解决</title>
      <link href="/1099619583/"/>
      <url>/1099619583/</url>
      <content type="html"><![CDATA[<p>spring boot整合swagger打包之后使用nginx代理出错无法使用解决。错误为：<code>&quot;no content&quot; and Response Code 0</code> 或者 <code>使用spring security，公开访问的资源出现403</code><br><a id="more"></a></p><p>可尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcat &#123;</span><br><span class="line">    server localhost:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">root /usr/share/nginx/html/dist;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://tomcat/;</span><br><span class="line">        proxy_set_header Host $host; #指定host</span><br><span class="line">    &#125;</span><br><span class="line"># ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> nginx </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring boot swagger配置</title>
      <link href="/1664483852/"/>
      <url>/1664483852/</url>
      <content type="html"><![CDATA[<p>spring boot整合swagger搭建restful api文档<br><a id="more"></a></p><h3 id="创建spring-boot项目"><a href="#创建spring-boot项目" class="headerlink" title="创建spring boot项目"></a>创建spring boot项目</h3><p>使用 <code>Spring Initializr</code> 创建 <code>spring boot</code> 项目 </p><h3 id="swagger配置"><a href="#swagger配置" class="headerlink" title="swagger配置"></a>swagger配置</h3><p><code>maven</code> 配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>创建 <code>Swagger</code> 配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function">ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">        .title(<span class="string">"API Reference"</span>)</span><br><span class="line">        .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">        .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">customImplementation</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select().paths(PathSelectors.any())</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"controller"</span>)) <span class="comment">//controller所在包</span></span><br><span class="line">                .build()</span><br><span class="line">                .pathMapping(<span class="string">"/"</span>)</span><br><span class="line">      ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="swagger注解"><a href="#swagger注解" class="headerlink" title="swagger注解"></a>swagger注解</h3><blockquote><p>@Api：修饰整个类，描述Controller的作用</p></blockquote><blockquote><p>@ApiImplicitParam：一个请求参数</p></blockquote><blockquote><p>@ApiImplicitParams：多个请求参数</p></blockquote><blockquote><p>@ApiModel：修饰model对象类</p></blockquote><blockquote><p>@ApiModelProperty：修饰model对象类的属性</p></blockquote><blockquote><p>@ApiOperation：描述一个类的一个方法，或者说一个接口</p></blockquote><blockquote><p>@ApiParam：单个参数描述</p></blockquote><blockquote><p>@ApiResponse：HTTP响应其中1个描述</p></blockquote><blockquote><p>@ApiResponses：HTTP响应整体描述</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel</span>(<span class="string">"用户信息"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"主键"</span>, notes = <span class="string">"数据库自动生成"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"账号"</span>, required = <span class="keyword">true</span>, notes = <span class="string">"唯一"</span>)</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"密码"</span>, required = <span class="keyword">true</span>, hidden = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(value = <span class="string">"用户API"</span>, description = <span class="string">"用户API"</span>, tags = <span class="string">"User"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"根据用户id获取用户信息"</span>)</span><br><span class="line">     <span class="meta">@ApiImplicitParams</span>(</span><br><span class="line">             <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"userId"</span>, value = <span class="string">"用户id"</span>)</span><br><span class="line">     )</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"get"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpRes&lt;User&gt; <span class="title">getAll</span><span class="params">(@RequestParam <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 启动 <code>spring boot</code>，访问 <code>http://localhost:8080/swagger-ui.html</code> 就可以看到效果了。<br> <img src="/1664483852/408ce14c.png" alt="示例"></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用electron构建angular桌面应用程序</title>
      <link href="/2268864848/"/>
      <url>/2268864848/</url>
      <content type="html"><![CDATA[<p>使用electron打包angular为桌面应用程序<br><a id="more"></a></p><h3 id="创建angular项目"><a href="#创建angular项目" class="headerlink" title="创建angular项目"></a>创建angular项目</h3><p>如果没安装angular-cli，先安装angular-cli<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure></p><p>使用ng创建项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new electron-angular-demo</span><br></pre></td></tr></table></figure></p><p>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>使用IDE工具打开 <code>electron-anguhelar-demo</code></p><p>更新 <code>src/index.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base href=&quot;./&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="配置electron"><a href="#配置electron" class="headerlink" title="配置electron"></a>配置electron</h3><p>安装electron<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron --save-dev</span><br></pre></td></tr></table></figure></p><p>在项目根目录下创建 <code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保持一个对于 window 对象的全局引用，如果你不这样做，</span></span><br><span class="line"><span class="comment">// 当 JavaScript 对象被垃圾回收， window 会被自动地关闭</span></span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建浏览器窗口。</span></span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    <span class="comment">// icon: `file://$&#123;__dirname&#125;/dist/assets/logo.png`</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 然后加载应用的 index.html。</span></span><br><span class="line">  win.loadURL(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/dist/index.html`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打开开发者工具。</span></span><br><span class="line">  win.webContents.openDevTools()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当 window 被关闭，这个事件会被触发。</span></span><br><span class="line">  win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span></span><br><span class="line">    <span class="comment">// 通常会把多个 window 对象存放在一个数组里面，</span></span><br><span class="line">    <span class="comment">// 与此同时，你应该删除相应的元素。</span></span><br><span class="line">    win = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Electron 会在初始化后并准备</span></span><br><span class="line"><span class="comment">// 创建浏览器窗口时，调用这个函数。</span></span><br><span class="line"><span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当全部窗口关闭时退出。</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span></span><br><span class="line">  <span class="comment">// 否则绝大部分应用及其菜单栏会保持激活。</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">  app.quit()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在macOS上，当单击dock图标并且没有其他窗口打开时，</span></span><br><span class="line">  <span class="comment">// 通常在应用程序中重新创建一个窗口。</span></span><br><span class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">  createWindow()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这文件，你可以续写应用剩下主进程代码。</span></span><br><span class="line"><span class="comment">// 也可以拆分成几个文件，然后用 require 导入。</span></span><br></pre></td></tr></table></figure><p>更新 <code>package.json</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;electron-angular-demo&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;, // 添加</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;ng&quot;: &quot;ng&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;ng serve&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;ng build&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;ng test&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;ng lint&quot;,</span><br><span class="line">    &quot;e2e&quot;: &quot;ng e2e&quot;,</span><br><span class="line">    &quot;electron&quot;: &quot;electron .&quot;, // 添加</span><br><span class="line">    &quot;electron-build&quot;: &quot;ng build --prod &amp;&amp; electron .&quot; // 添加</span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="运行electron"><a href="#运行electron" class="headerlink" title="运行electron"></a>运行electron</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run electron-build</span><br></pre></td></tr></table></figure><p>效果截图<br><img src="/2268864848/23627f60.png" alt="效果截图"></p><p>如果出现 <code>Error: Cannot find module &#39;@angular-devkit/core&#39;</code>，检查 <code>package.json</code> 的 <code>@angular/cli</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// &quot;@angular/cli&quot;: &quot;1.5.5&quot; 换成</span><br><span class="line">&quot;@angular/cli&quot;: &quot;^1.5.5&quot;</span><br></pre></td></tr></table></figure></p><p>在运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows下easybcd引导ubuntu安装的menu.lst配置</title>
      <link href="/736068404/"/>
      <url>/736068404/</url>
      <content type="html"><![CDATA[<p> windows下easybcd引导ubuntu安装的menu.lst配置以及说明<br> <a id="more"></a></p><h3 id="menu-lst配置"><a href="#menu-lst配置" class="headerlink" title="menu.lst配置"></a>menu.lst配置</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title Install Ubuntu</span><br><span class="line">root (hd0,0)</span><br><span class="line">kernel (hd0,0)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-14.04.5-desktop-amd64.iso locale=zh_CN.UTF-8</span><br><span class="line">initrd (hd0,0)/initrd.lz</span><br><span class="line">title reboot</span><br><span class="line">reboot</span><br><span class="line">title halt</span><br><span class="line">halt</span><br></pre></td></tr></table></figure><p> ubuntu的iso文件位置在c盘，以及initrd.lz和vmlinuz.efi也拷贝到c盘，c盘在硬盘的位置可以从硬盘管理器查看(我的电脑-&gt;右键-&gt;管理)，序号从0开始<br> (hd0,0)中hd0表示电脑第一块硬盘，0表示这块硬盘上的第一个分区(填ubuntu的iso文件所在分区位置)</p>]]></content>
      
      <categories>
          
          <category> easybcd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> windows </tag>
            
            <tag> easybcd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springmvc No mapping found for HTTP request</title>
      <link href="/1542896872/"/>
      <url>/1542896872/</url>
      <content type="html"><![CDATA[<p>spring mvc 出现No mapping found for HTTP request with URI /css/main.css in DispatcherServlet with name ‘springmvc’错误解决<br><a id="more"></a></p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p> 在web.xml文件上配置<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p> 在spring-mvc配置文件中配置<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 先在spring-mvc配置文件中声明spring-mvc标签</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">   ...</span><br><span class="line">   xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">   xsi:schemaLocation=&quot;...</span><br><span class="line">   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span><br><span class="line">   &quot;&gt;</span><br><span class="line"># 再添加</span><br><span class="line">&lt;mvc:default-servlet-handler/&gt;</span><br><span class="line"># 或者</span><br><span class="line">&lt;mvc:resources mapping=&quot;/**&quot; location=&quot;/&quot; /&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows下easybcd引导centos安装的menu.lst配置</title>
      <link href="/216010902/"/>
      <url>/216010902/</url>
      <content type="html"><![CDATA[<p>在windows下easybcd引导centos安装的menu.lst配置以及注意事项<br><a id="more"></a></p><h3 id="menu-lst配置"><a href="#menu-lst配置" class="headerlink" title="menu.lst配置"></a>menu.lst配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title Install CentOS</span><br><span class="line">root (hd0,6)</span><br><span class="line">kernel (hd0,6)/isolinux/vmlinuz linux repo=hd:/dev/sda7:/</span><br><span class="line">initrd (hd0,6)/isolinux/initrd.img</span><br></pre></td></tr></table></figure><blockquote><p>linux repo=hd:/dev/sda7:/表示centos的iso文件所在位置，hd:/dev/sda7:/“(序号从1开始)”和(hd0,6)“序号是0开始”指向的是同一个位置</p></blockquote><h3 id="安装centos时注意事项"><a href="#安装centos时注意事项" class="headerlink" title="安装centos时注意事项"></a>安装centos时注意事项</h3><p>centos可以识别etx3的磁盘格式（也可以识别fat32格式，但fat32格式的最大单个文件支持不能超过4g），无法识别ntfs，所以在安装前可以先用 EASEUS Partition Master工具来划分ext3分区，在将centos的iso镜像和image以及isolinux文件拷贝到这个分区下，再进行安装，最后在配置menu.lst</p>]]></content>
      
      <categories>
          
          <category> easybcd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> easybcd </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git modified content, untracked content</title>
      <link href="/139708025/"/>
      <url>/139708025/</url>
      <content type="html"><![CDATA[<p>git commit出现modified content, untracked content问题解决<br><a id="more"></a></p><blockquote><p>检查该目录下是否存在.git文件夹，将其删除在重新<code>git add</code> 和 <code>git commit</code></p></blockquote>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo next云标签</title>
      <link href="/2867892032/"/>
      <url>/2867892032/</url>
      <content type="html"><![CDATA[<p>hexo next添加hexo-tag-cloud云标签<br><a id="more"></a></p><h3 id="hexo-tag-cloud插件安装"><a href="#hexo-tag-cloud插件安装" class="headerlink" title="hexo-tag-cloud插件安装"></a>hexo-tag-cloud插件安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-tag-cloud --save</span><br></pre></td></tr></table></figure><h3 id="修改next-layout-custom-sidebar-swig"><a href="#修改next-layout-custom-sidebar-swig" class="headerlink" title="修改next/layout/_custom/sidebar.swig"></a>修改next/layout/_custom/sidebar.swig</h3><p>加入以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 1 %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div class=&quot;widget-wrap&quot;&gt;</span><br><span class="line">    &lt;h3 class=&quot;widget-title&quot;&gt;Tag Cloud&lt;/h3&gt;</span><br><span class="line">    &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;</span><br><span class="line">        &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt;</span><br><span class="line">            &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">        &lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="完成安装和显示"><a href="#完成安装和显示" class="headerlink" title="完成安装和显示"></a>完成安装和显示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo-tag-cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo SEO配置</title>
      <link href="/3504545898/"/>
      <url>/3504545898/</url>
      <content type="html"><![CDATA[<p>hexo next主题博客主动提交链接到百度和谷歌<br><a id="more"></a></p><h3 id="sitemap配置"><a href="#sitemap配置" class="headerlink" title="sitemap配置"></a>sitemap配置</h3><p>安装sitemap插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></p><p>修改next主题下的<code>_config.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  sitemap: /sitemap.xml || sitemap</span><br><span class="line">  </span><br><span class="line">seo: true</span><br><span class="line"></span><br><span class="line">baidu_push: true</span><br></pre></td></tr></table></figure></p><p>修改hexo的<code>_config.yml</code>的url为博客地址，这里是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: https://jecyhw.github.io</span><br></pre></td></tr></table></figure></p><h3 id="博客链接URL唯一-可选"><a href="#博客链接URL唯一-可选" class="headerlink" title="博客链接URL唯一(可选)"></a>博客链接URL唯一(可选)</h3><p><code>hexo-abbrlink</code>插件安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></p><p>修改hexo的<code>_config.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: :abbrlink/</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: dec    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure></p><h3 id="添加robots-txt"><a href="#添加robots-txt" class="headerlink" title="添加robots.txt"></a>添加robots.txt</h3><p>在<code>source</code>目录下创建<code>robots.txt</code>,复制下面内容，修改<code>Sitemap</code>地址为博客地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/</span><br><span class="line">Allow: /archives/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: https://jecyhw.github.io/sitemap.xml</span><br><span class="line">Sitemap: https://jecyhw.github.io/baidusitemap.xml</span><br></pre></td></tr></table></figure></p><p>部署提交到github<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p><h3 id="链接提交到百度站点"><a href="#链接提交到百度站点" class="headerlink" title="链接提交到百度站点"></a>链接提交到百度站点</h3><p>进入百度站长工具</p><blockquote><p><a href="https://ziyuan.baidu.com/site/index" target="_blank" rel="noopener">https://ziyuan.baidu.com/site/index</a></p></blockquote><p>填写博客地址<br><img src="/3504545898/63673f90.png" alt="填写博客地址"><br>设置站点领域<br><img src="/3504545898/beb98c99.png" alt="设置站点领域"><br>验证网站，这里选择文件验证<br><img src="/3504545898/64d1375a.png" alt="验证网站"><br>下载验证文件，放入到source目录下，打开验证文件，在最上面加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"> layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>部署到github上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p><p>完成验证。百度收录比较慢，需要等待好长一段时间才能搜索到。</p><h3 id="链接提交到谷歌"><a href="#链接提交到谷歌" class="headerlink" title="链接提交到谷歌"></a>链接提交到谷歌</h3><p>进入google站点平台</p><blockquote><p><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">https://www.google.com/webmasters/tools/home?hl=zh-CN</a></p></blockquote><p>添加站点<br><img src="/3504545898/e5fe3d7e.png" alt="添加站点"></p><p>验证网站<br><img src="/3504545898/01a599c2.png" alt="验证网站"><br>下载验证文件，放入到source目录下，打开验证文件，在最上面加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"> layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>部署到github上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p><p>完成验证。</p><p>添加站点地图<br><img src="/3504545898/70e37bd4.png" alt="添加站点地图"><br>等几个小时就能在google上搜索到自己的博客了</p><h3 id="添加nofollow标签-可选"><a href="#添加nofollow标签-可选" class="headerlink" title="添加nofollow标签(可选)"></a>添加nofollow标签(可选)</h3><p> 修改<code>themes/next/layout/_partials/footer.swig</code>，对所有<a>标签加上 <code>rel=&quot;external nofollow&quot;</code><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot; href=&quot;https://hexo.io&quot; rel=&quot;external nofollow&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot; rel=&quot;external nofollow&quot;&gt;</span><br></pre></td></tr></table></figure></a></p><p> 修改<code>themes/next/layout/_macro/sidebar.swig</code>，对部分<a>标签加上 <code>rel=&quot;external nofollow&quot;</code> ，如下所示<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://creativecommons.org/&#123;% if theme.creative_commons === &apos;zero&apos; %&#125;publicdomain/zero/1.0&#123;% else %&#125;licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0&#123;% endif %&#125;/&quot; class=&quot;cc-opacity&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;&#123;&#123; name &#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure></a></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo next 打赏</title>
      <link href="/910053190/"/>
      <url>/910053190/</url>
      <content type="html"><![CDATA[<p>hexo next添加打赏功能<br><a id="more"></a></p><h3 id="微信和支付宝二维码设置"><a href="#微信和支付宝二维码设置" class="headerlink" title="微信和支付宝二维码设置"></a>微信和支付宝二维码设置</h3><p>先生成微信和支付宝二维码，将图片放在<code>themes/next/source/images</code>下</p><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置<code>_config.yml</code></h3><p>找到如下语句并修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Reward</span><br><span class="line">reward_comment: 您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: /images/wechatpay.png</span><br><span class="line">alipay: /images/alipay.png</span><br></pre></td></tr></table></figure></p><h3 id="删除打赏文字闪动样式"><a href="#删除打赏文字闪动样式" class="headerlink" title="删除打赏文字闪动样式"></a>删除打赏文字闪动样式</h3><p>进入<code>themes\next\source\css\_common\components\post\post-reward.styl</code>,找到以下样式并删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#wechat:hover p&#123;</span><br><span class="line">    animation: roll 1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 1s infinite linear;</span><br><span class="line">    -moz-animation: roll 1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">#alipay:hover p&#123;</span><br><span class="line">    animation: roll 1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 1s infinite linear;</span><br><span class="line">    -moz-animation: roll 1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">#bitcoin:hover p &#123;</span><br><span class="line">    animation: roll 1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 1s infinite linear;</span><br><span class="line">    -moz-animation: roll 1s infinite linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo 404公益</title>
      <link href="/1924118775/"/>
      <url>/1924118775/</url>
      <content type="html"><![CDATA[<p>在source文件夹下创建<code>404.html</code>，复制下面内容<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">title: &quot;404&quot;</span><br><span class="line">---</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;404&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;description&quot; content=&quot;404错误，页面不存在！&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;回到我的主页&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>修改next主题<code>_config.yml</code>文件，去掉commonweal注释，如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring mvc中ResponseEntity的中文返回乱码解决</title>
      <link href="/126721933/"/>
      <url>/126721933/</url>
      <content type="html"><![CDATA[<p>spring mvc中ResponseEntity的中文返回乱码解决方法<br><a id="more"></a></p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>在<code>@RequestMapping</code>注解中声明<code>prodeces={&quot;application/json; charset=utf-8&quot;}</code>可以解决</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>在dispatcher-servlet配置文件中添加以下配置即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:annotation-driven&gt;</span><br><span class="line">    &lt;mvc:message-converters&gt;&lt;!-- 处理请求时返回字符串的中文乱码问题 --&gt;</span><br><span class="line">        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;writeAcceptCharset&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;supportedMediaTypes&quot;&gt;</span><br><span class="line">                &lt;list&gt;</span><br><span class="line">                    &lt;value&gt;application/xml;charset=UTF-8&lt;/value&gt;</span><br><span class="line">                    &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;</span><br><span class="line">                    &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;</span><br><span class="line">                    &lt;value&gt;application/json;charset=UTF-8&lt;/value&gt;</span><br><span class="line">                &lt;/list&gt;</span><br><span class="line">            &lt;/property&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/mvc:message-converters&gt;</span><br><span class="line">&lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring mvc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring mvc freemarker配置</title>
      <link href="/3913767996/"/>
      <url>/3913767996/</url>
      <content type="html"><![CDATA[<p>在applicationContext.xml配置文件中配置<br><a id="more"></a></p><h3 id="非web的freemarker配置"><a href="#非web的freemarker配置" class="headerlink" title="非web的freemarker配置"></a>非web的freemarker配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;freemarkerConfiguration&quot; class=&quot;org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean&quot;&gt;</span><br><span class="line">    &lt;!--模板所在目录--&gt;</span><br><span class="line">    &lt;property name=&quot;templateLoaderPath&quot; value=&quot;classpath:template&quot; /&gt; </span><br><span class="line">    &lt;!--freemarker配置文件--&gt;</span><br><span class="line">    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:freemarker.properties&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;freemarkerVariables&quot;&gt;</span><br><span class="line">        &lt;map&gt;</span><br><span class="line">            &lt;entry key=&quot;tileSize&quot; value=&quot;$&#123;tileSize&#125;&quot;/&gt;</span><br><span class="line">            &lt;entry key=&quot;tileFormat&quot; value=&quot;$&#123;tileFormat&#125;&quot;/&gt;</span><br><span class="line">            &lt;entry key=&quot;maxLevel&quot; value=&quot;$&#123;maxLevel&#125;&quot;/&gt;</span><br><span class="line">        &lt;/map&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="web的freemarker配置"><a href="#web的freemarker配置" class="headerlink" title="web的freemarker配置"></a>web的freemarker配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;&gt;</span><br><span class="line">    &lt;!--模板所在目录--&gt;</span><br><span class="line">    &lt;property name=&quot;templateLoaderPath&quot; value=&quot;classpath:template&quot; /&gt;</span><br><span class="line">    &lt;!--freemarker配置文件--&gt;</span><br><span class="line">    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:freemarker.properties&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;freemarkerVariables&quot;&gt;</span><br><span class="line">        &lt;map&gt;</span><br><span class="line">            &lt;entry key=&quot;tileSize&quot; value=&quot;$&#123;tileSize&#125;&quot;/&gt;</span><br><span class="line">            &lt;entry key=&quot;tileFormat&quot; value=&quot;$&#123;tileFormat&#125;&quot;/&gt;</span><br><span class="line">            &lt;entry key=&quot;maxLevel&quot; value=&quot;$&#123;maxLevel&#125;&quot;/&gt;</span><br><span class="line">        &lt;/map&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>在freemarker的<code>Configuration</code>类实例注入该bean即可<br>两者的区别在于<code>FreeMarkerConfigurer</code>依赖与<code>ServletContext</code></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring mvc </tag>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring mvc将空字串转换成null配置</title>
      <link href="/4075928980/"/>
      <url>/4075928980/</url>
      <content type="html"><![CDATA[<p>在applicationContext配置文件中添加<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;customEditors&quot;&gt;</span><br><span class="line">        &lt;map&gt;</span><br><span class="line">            &lt;entry key=&quot;java.lang.String&quot;&gt;</span><br><span class="line">                &lt;bean class=&quot;org.springframework.beans.propertyeditors.StringTrimmerEditor&quot;&gt;</span><br><span class="line">                    &lt;constructor-arg name=&quot;emptyAsNull&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">                &lt;/bean&gt;</span><br><span class="line">            &lt;/entry&gt;</span><br><span class="line">        &lt;/map&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring mvc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring boot更改thymeleaf版本</title>
      <link href="/3210521597/"/>
      <url>/3210521597/</url>
      <content type="html"><![CDATA[<p>spring boot下更改thymeleaf版本</p><a id="more"></a><p>Maven配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;</span><br><span class="line">    &lt;thymeleaf-layout-dialect.version&gt;2.0.5&lt;/thymeleaf-layout-dialect.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></p><p>Gradle配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ext[&apos;thymeleaf.version&apos;] = &apos;3.0.2.RELEASE&apos;</span><br><span class="line">ext[&apos;thymeleaf-layout-dialect.version&apos;] = &apos;2.0.5&apos;</span><br></pre></td></tr></table></figure></p><hr><p>提示: spring boot所有的依赖项的版本配置在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.4.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure></p><p>用自己的版本号覆盖就行</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring boot - Live Reload/Hot Swap</title>
      <link href="/3435526137/"/>
      <url>/3435526137/</url>
      <content type="html"><![CDATA[<p>spring boot开发环境热部署，修改后实时更新<br><a id="more"></a></p><h3 id="项目配置依赖"><a href="#项目配置依赖" class="headerlink" title="项目配置依赖"></a>项目配置依赖</h3><p>Maven,添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>Gradle，添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtime(&apos;org.springframework.boot:spring-boot-devtools&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="IDEA设置"><a href="#IDEA设置" class="headerlink" title="IDEA设置"></a>IDEA设置</h3><p><code>File -&gt; Settings -&gt; Build, Exception, Deployment -&gt; Compiler</code></p><blockquote><p>Make project automatically勾选上</p></blockquote><p><code>Ctrl + Shift + A</code>,输入<code>Registry</code></p><blockquote><p>找到 compiler.automake.allow.when.app.running,勾选上</p></blockquote><h3 id="安装chrome插件-livereload"><a href="#安装chrome插件-livereload" class="headerlink" title="安装chrome插件: livereload"></a>安装chrome插件: livereload</h3>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot`` </tag>
            
            <tag> hot swap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring boot security error: in a frame because it set &#39;X-Frame-Options&#39; to DENY</title>
      <link href="/2914312071/"/>
      <url>/2914312071/</url>
      <content type="html"><![CDATA[<p>spring boot security出现in a frame because it set ‘X-Frame-Options’ to DENY错误解决办法<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                    .headers() //加上</span><br><span class="line">                    .frameOptions().sameOrigin()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>virtualbox从u盘启动进入Ubuntu</title>
      <link href="/3314239952/"/>
      <url>/3314239952/</url>
      <content type="html"><![CDATA[<p>1.将U盘接到电脑的USB接口上。键盘上按WIN+R打开运行窗口，输入diskmgmt.msc点击确定打开磁盘管理。<br><a id="more"></a><br><img src="/3314239952/01f9cc8a.png" alt="diskmgmt.msc"><br><img src="/3314239952/798f477b.png" alt="Disk Management"></p><p>2.然后我们右击VirtualBox程序，选择以管理员身份打开。这个现在只要打开就可以，暂不进行操作。<br><img src="/3314239952/889384e6.png" alt="Run as administrator"></p><p>3.以管理员身份打开CMD窗口。（这里要注意，一定要以管理员身份打开CDM，否则执行命令时要权限不足。）</p><p>4.先查看一下VirtualBox的安装目录位置，等下需要进入到这个目录。右击VirtualBox图标，点击属性。在起始位置中可以看安装的盘符及具体的安装目录。把这个复制起来。<br><img src="/3314239952/1ae20c79.png" alt="VirtualBox"></p><p>5.现在我们在CMD窗口中，要进入到VirtualBox的安装目录位置。<br><img src="/3314239952/744df697.png" alt="从CMD进入VirtualBox"></p><p>6.接着输入</p><blockquote><p>VBoxManage internalcommands createrawvmdk -filename F:\usb.vmdk -rawdisk \.\PhysicalDrive1</p></blockquote><p>PhysicalDrive1里面的1是第一步里面的u盘位置。</p><p>7.然后按下回车键执行，就创建成功。我们进入到刚才的这个保存位置去看看有没有usb.vmdk文件，有的话就表示创建成功。</p><p>8.在virtualbox里新建<br><img src="/3314239952/79c730a1.png" alt="创建虚拟机"><br><img src="/3314239952/26c48efa.png" alt="从u盘启动"></p>]]></content>
      
      <categories>
          
          <category> virtualbox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> virtualbox </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu14.04 hadoop安装步骤(单机和伪分布式)</title>
      <link href="/2943276818/"/>
      <url>/2943276818/</url>
      <content type="html"><![CDATA[<p>ubuntu14.04下hadoop单机和伪分布式的安装步骤<br><a id="more"></a></p><h3 id="创建hadoop用户"><a href="#创建hadoop用户" class="headerlink" title="创建hadoop用户"></a>创建hadoop用户</h3><p>添加hadoop用户（用户名字可以自己起）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m hadoop -s /bin/bash</span><br></pre></td></tr></table></figure></p><p>给hadoop用户设置密码，这里简单设置为：1，按照提示输入两次密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd hadoop</span><br></pre></td></tr></table></figure></p><p>给hadoop用户增加管理员权限，方便部署<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser hadoop sudo</span><br></pre></td></tr></table></figure></p><p>最后注销当前用户，使用hadoop账户登陆(注意别忘了)<br>使用hadoop用户登陆之后，需要先更新一下apt<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><h3 id="安装、配置ssh无密码登陆"><a href="#安装、配置ssh无密码登陆" class="headerlink" title="安装、配置ssh无密码登陆"></a>安装、配置ssh无密码登陆</h3><p>集群、单节点模式都需要用到ssh登陆，ubuntu默认安装了ssh client，所以我还需要装ssh server<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></p><p>安装之后，使用如下命令登陆本机(首次登陆会有提示，输入yes即可)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure></p><p>由于每次ssh登陆都需要输入密码，所以我们需要配置成无密码登陆比较方便，先退出刚才的ssh，然后利用ssh-keygen生成密钥，并将密钥加入到授权中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exit #退出刚才的ssh localhost</span><br><span class="line">cd ~/.ssh/ #若没有该目录，请先执行一次ssh localhost</span><br><span class="line">ssh-keygen -t rsa #会有提示，都按回车就可以</span><br><span class="line">cat ./id_rsa.pub &gt;./authorized_keys #加入授权</span><br></pre></td></tr></table></figure></p><p>再用ssh locahost命令，无需密码就能直接登陆了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure></p><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>jdk8下载地址</p><blockquote><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>下载之后进行解压<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads/</span><br><span class="line">tar zxvf jdk-8u91-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p></blockquote><p>将解压的文件夹移动到<code>/usr/local</code>目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mv jdk1.8.0_91 /usr/<span class="built_in">local</span></span><br><span class="line">``` </span><br><span class="line">配置jdk环境变量,使用`gedit`打开`/etc/profile`文件</span><br><span class="line">```bash</span><br><span class="line">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure></p><p>在文件最后一行复制以下几行，并保存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_91</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_91/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><p>执行<code>source /etc/profile</code>使修改立即生效</p><p>使用<code>java -version</code>查看安装是否成功</p><h3 id="安装hadoop2"><a href="#安装hadoop2" class="headerlink" title="安装hadoop2"></a>安装hadoop2</h3><p>hadoop2下载地址</p><blockquote><p><a href="http://hadoop.apache.org/releases.html" target="_blank" rel="noopener">http://hadoop.apache.org/releases.html</a></p></blockquote><p>解压下载好的hadoop<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads/ <span class="comment">#进入到下载目录</span></span><br><span class="line">tar zxvf hadoop-2.7.2.tar.gz</span><br></pre></td></tr></table></figure></p><p>将解压后的hadoop移动到/usr/local目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv hadoop-2.7.2 /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></p><p>将hadoop文件夹及子目录的所有者更改为hadoop用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">sudo chown -R hadoop hadoop-2.7.2</span><br></pre></td></tr></table></figure></p><p>查看hadoop版本，是否可以成功使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hadoop version</span><br></pre></td></tr></table></figure></p><h3 id="hadoop单机配置-非分布式"><a href="#hadoop单机配置-非分布式" class="headerlink" title="hadoop单机配置(非分布式)"></a>hadoop单机配置(非分布式)</h3><p>hadoop默认模式为非分布式模式，无需进行其他配置即可运行。非分布式即单java进程，方便进行调试。</p><p>现在来执行例子来感受hadoop的运行。hadoop附带了丰富的例子(可以通过运行 <code>./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar</code>来查看所有的例子)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar</span><br></pre></td></tr></table></figure></p><p>我们选择运行grep例子，我们讲input文件夹中的所有文件作为输入，筛选当中符合正则表达式dfs[a-z.]+的单词病统计出现的次数，最后输出结果到output文件夹中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/hadoop-2.7.2/</span><br><span class="line">mkdir ./input</span><br><span class="line">cp ./etc/hadoop/*.xml ./input/ <span class="comment">#将配置文件作为输入文件</span></span><br><span class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar grep ./input ./output <span class="string">'dfs[a-z.]+'</span></span><br><span class="line"></span><br><span class="line">cat ./output/* <span class="comment">#查看程序的执行结果</span></span><br></pre></td></tr></table></figure></p><p>注意:hadoop默认不会覆盖结果文件，如果再次运行上面实例，需要先将output文件夹删除，否则会提示出错。</p><h3 id="hadoop伪分布式配置"><a href="#hadoop伪分布式配置" class="headerlink" title="hadoop伪分布式配置"></a>hadoop伪分布式配置</h3><p>Hadoop 可以在单节点上以伪分布式的方式运行，Hadoop 进程以分离的 Java 进程来运行，节点既作为 <code>NameNode</code> 也作为 <code>DataNode</code>，同时，读取的是 HDFS 中的文件。</p><p>Hadoop 的配置文件位于 <code>/usr/local/hadoop-2.7.2/etc/hadoop/</code> 中，伪分布式需要修改2个配置文件 <code>core-site.xml</code> 和 <code>hdfs-site.xml</code> 。Hadoop的配置文件是 xml 格式，每个配置以声明 property 的 name 和 value 的方式来实现。</p><p>修改配置文件 <code>core-site.xml</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ./etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure></p><p>修改为下面配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-2.7.2/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同样的，修改配置文件 <code>hdfs-site.xml</code>，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ./etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-2.7.2/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop-2.7.2/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Hadoop配置文件说明</p><p>Hadoop 的运行方式是由配置文件决定的（运行 Hadoop 时会读取配置文件），因此如果需要从伪分布式模式切换回非分布式模式，需要删除 <code>core-site.xml</code> 中的配置项。</p><p>此外，伪分布式虽然只需要配置 <code>fs.defaultFS</code> 和 <code>dfs.replication</code> 就可以运行（官方教程如此），不过若没有配置 <code>hadoop.tmp.dir</code> 参数，则默认使用的临时目录为 <code>/tmp/hadoo-hadoop</code>，而这个目录在重启时有可能被系统清理掉，导致必须重新执行 format 才行。所以我们进行了设置，同时也指定 <code>dfs.namenode.name.dir</code> 和 <code>dfs.datanode.data.dir</code>，否则在接下来的步骤中可能会出错。</p><p>配置完成后，执行 <code>NameNode</code> 的格式化:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs namenode -format</span><br></pre></td></tr></table></figure><p>接着开启 <code>NameNode</code> 和 <code>DataNode</code> 守护进程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure></p><p>如果报以下错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Starting namenodes on [localhost]</span><br><span class="line">localhost: Error: JAVA_HOME is not <span class="built_in">set</span> and could not be found.</span><br><span class="line">localhost: Error: JAVA_HOME is not <span class="built_in">set</span> and could not be found.</span><br><span class="line">Starting secondary namenodes [0.0.0.0]</span><br><span class="line">0.0.0.0: Error: JAVA_HOME is not <span class="built_in">set</span> and could not be found.</span><br></pre></td></tr></table></figure></p><p>则需要修改<code>./etc/hadoop/hadoop-env.sh</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit ./etc/hadoop/hadoop-env.sh <span class="comment">#用gedit打开</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到下面这行</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span></span><br><span class="line"><span class="comment"># 修改成下面，使用jdk的绝对路径</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_91</span><br></pre></td></tr></table></figure><p>再重新执行<code>./sbin/start-dfs.sh</code>即可</p><p>启动完成后，使用jps来判断是否成功启动。若成功启动则会列出如下进程: “NameNode”、”DataNode” 和 “SecondaryNameNode”（如果 SecondaryNameNode 没有启动，请运行 sbin/stop-dfs.sh 关闭进程，然后再次尝试启动尝试）。如果没有 NameNode 或 DataNode ，那就是配置不成功，请仔细检查之前步骤，或通过查看启动日志排查原因。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure></p><p>成功启动后，可以访问 Web 界面 <a href="http://localhost:50070" target="_blank" rel="noopener">http://localhost:50070</a>, 查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件。<br><img src="/2943276818/7d7a8f05.png" alt="hadoop的web界面"></p><h3 id="运行hadoop伪分布式实例"><a href="#运行hadoop伪分布式实例" class="headerlink" title="运行hadoop伪分布式实例"></a>运行hadoop伪分布式实例</h3><hr><p>上面的单机模式，grep 例子读取的是本地数据，伪分布式读取的则是 HDFS 上的数据。要使用 HDFS，首先需要在 HDFS 中创建用户目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir -p /user/hadoop</span><br><span class="line"><span class="comment">#-p表示父目录</span></span><br></pre></td></tr></table></figure></p><p>接着将 ./etc/hadoop 中的 xml 文件作为输入文件复制到分布式文件系统中，即将 /usr/local/hadoop/etc/hadoop 复制到分布式文件系统中的 /user/hadoop/input 中。我们使用的是 hadoop 用户，并且已创建相应的用户目录 /user/hadoop ，因此在命令中就可以使用相对路径如 input，其对应的绝对路径就是 /user/hadoop/input:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir input</span><br><span class="line"> ./bin/hdfs dfs -put ./etc/hadoop/*.xml input</span><br></pre></td></tr></table></figure></p><p>复制完成后，可以通过如下命令查看文件列表：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls input</span><br></pre></td></tr></table></figure></p><p>伪分布式运行 MapReduce 作业的方式跟单机模式相同，区别在于伪分布式读取的是HDFS中的文件（可以将单机步骤中创建的本地 input 文件夹，输出结果 output 文件夹都删掉来验证这一点）。</p><p>先删除单机步骤中创建的input文件夹，还有输出结果output文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf input</span><br><span class="line">rm -rf output</span><br></pre></td></tr></table></figure></p><p>执行grep例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar grep input output <span class="string">'dfs[a-z.]+'</span></span><br></pre></td></tr></table></figure></p><p>结果如下，注意到刚才我们已经更改了配置文件，所以运行结果不同。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -cat output/*</span><br></pre></td></tr></table></figure></p><p>我们也可以将运行结果取回到本地：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ./output <span class="comment">#需要先删除本地output文件夹</span></span><br><span class="line">./bin/hdfs dfs -get output ./output</span><br><span class="line">cat ./output/*</span><br></pre></td></tr></table></figure></p><p>Hadoop 运行程序时，输出目录不能存在，否则会提示错误 “org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory hdfs://localhost:9000/user/hadoop/output already exists” ，因此若要再次执行，需要执行如下命令删除 output 文件夹:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -rm -r output</span><br></pre></td></tr></table></figure></p><h3 id="启动yarn"><a href="#启动yarn" class="headerlink" title="启动yarn"></a>启动yarn</h3><p>修改配置文件 mapred-site.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先进行重命名：</span></span><br><span class="line">mv ./etc/hadoop/mapred-site.xml.template  ./etc/hadoop/mapred-site.xml</span><br><span class="line"><span class="comment">#使用gedit修改</span></span><br><span class="line">sudo gedit ./etc/hadoop/mapred-site.xml</span><br><span class="line"><span class="comment">#用以下文本替换</span></span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着修改配置文件 yarn-site.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>启动 YARN 了（需要先执行过 ./sbin/start-dfs.sh）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./sbin/start-yarn.sh</span><br><span class="line">./sbin/mr-jobhistory-daemon.sh start historyserver <span class="comment">#开启历史服务器，才能在Web中查看任务运行情况</span></span><br><span class="line">```        </span><br><span class="line">开启后通过 jps 查看，可以看到多了 NodeManager 和 ResourceManager 两个后台进程</span><br><span class="line">```bash</span><br><span class="line">jps</span><br></pre></td></tr></table></figure></p><p>启动 YARN 之后，运行实例的方法还是一样的，仅仅是资源管理方式、任务调度不同。观察日志信息可以发现，不启用 YARN 时，是 “mapred.LocalJobRunner” 在跑任务，启用 YARN 之后，是 “mapred.YARNRunner” 在跑任务。启动 YARN 有个好处是可以通过 Web 界面查看任务的运行情况：<a href="http://localhost:8088/cluster，如下图所示。" target="_blank" rel="noopener">http://localhost:8088/cluster，如下图所示。</a><br><img src="/2943276818/13d31f6b.png" alt="开启YARN后可以查看任务运行信息"></p><p>不启动 YARN 需重命名 mapred-site.xml</p><p>如果不想启动 YARN，务必把配置文件 mapred-site.xml 重命名，改成 mapred-site.xml.template，需要用时改回来就行。否则在该配置文件存在，而未开启 YARN 的情况下，运行程序会提示 “Retrying connect to server: 0.0.0.0/0.0.0.0:8032” 的错误，这也是为何该配置文件初始文件名为 mapred-site.xml.template。</p><p>关闭 YARN 的脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./sbin/stop-yarn.sh</span><br><span class="line">./sbin/mr-jobhistory-daemon.sh stop historyserver</span><br></pre></td></tr></table></figure></p><p>Hadoop单机和伪分布式的配置就好了。</p>]]></content>
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu hadoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu configure: error: xml2-config not found. Please check your libxml2 installation错误解决</title>
      <link href="/3344135708/"/>
      <url>/3344135708/</url>
      <content type="html"><![CDATA[<p>在ubuntu14.04上安装php7时，执行:./configure命令时<br><a id="more"></a><br>一直报</p><blockquote><p>configure: error: xml2-config not found. Please check your libxml2 installation。</p></blockquote><p>使用<code>sudo apt-get install libxml2</code>显示这个已经安装</p><p>在网上查找后：需要安装libxml2-dev软件包才行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libxml2-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu14.04 nginx普通用户无法绑定1024以下端口解决</title>
      <link href="/280768137/"/>
      <url>/280768137/</url>
      <content type="html"><![CDATA[<p>执行下面这条命令<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo setcap &apos;cap_net_bind_service=+ep&apos; /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu16.04 navidia驱动安装</title>
      <link href="/2796597353/"/>
      <url>/2796597353/</url>
      <content type="html"><![CDATA[<p>安装navidia驱动<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge nvidia-*</span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nvidia-364﻿​</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> navidia driver </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo插入本地图片</title>
      <link href="/809422878/"/>
      <url>/809422878/</url>
      <content type="html"><![CDATA[<p>hexo博客引用本地图片并提交<br><a id="more"></a></p><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p>找到post_asset_folder设置为true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></p><h3 id="安装hexo-asset-image"><a href="#安装hexo-asset-image" class="headerlink" title="安装hexo-asset-image"></a>安装hexo-asset-image</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image -- save</span><br></pre></td></tr></table></figure><h3 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h3><p>每次使用<code>hexo new &quot;page&quot;</code>时，会生成<code>page.md</code>和<code>page</code>文件夹，<code>page</code>文件夹用来存放<code>page.md</code>中引用的图片。<br>使用markdown语法引用图片即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![demo](page\demo.png)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo-asset-image </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo和gitment评论</title>
      <link href="/652457385/"/>
      <url>/652457385/</url>
      <content type="html"><![CDATA[<p>hexo next主题配置gitment评论<br><a id="more"></a></p><h3 id="创建OAuth-App"><a href="#创建OAuth-App" class="headerlink" title="创建OAuth App"></a>创建OAuth App</h3><p>登录github，进入</p><blockquote><p><a href="https://github.com/settings/developers" target="_blank" rel="noopener">https://github.com/settings/developers</a></p></blockquote><p>点击 New OAuth APP,填写OAuth application内容，如下图所示<br><img src="/652457385/991b635b.png" alt="Register a new OAuth application"></p><p>填写完后，点击注册，成功之后可以看到Client ID和Client Secret，在后面需要用到。</p><h3 id="创建repository，用来存储评论"><a href="#创建repository，用来存储评论" class="headerlink" title="创建repository，用来存储评论"></a>创建repository，用来存储评论</h3><p>如下图所示，这里创建的repository是hexo-gitment<br><img src="/652457385/a93202a6.png" alt="Create a new repository"></p><h3 id="在hexo-next主题中配置"><a href="#在hexo-next主题中配置" class="headerlink" title="在hexo next主题中配置"></a>在hexo next主题中配置</h3><p>在next的_config.yml文件中找到gitment配置处<br><img src="/652457385/36a0a26d.png" alt="_config.yml"></p><h3 id="修改gitment-swig文件"><a href="#修改gitment-swig文件" class="headerlink" title="修改gitment.swig文件"></a>修改gitment.swig文件</h3><p>gitment.swig文件在next/layout/_third-party/comments下<br>将 <code>id: window.location.pathname,</code>修改为 <code>id: &#39;&#39;,</code>如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function renderGitment()&#123;</span><br><span class="line">    var gitment = new &#123;&#123;CommentsClass&#125;&#125;(&#123;</span><br><span class="line">        id: &apos;&#123;&#123;page.date&#125;&#125;&apos;,</span><br><span class="line">        owner: &apos;&#123;&#123; theme.gitment.github_user &#125;&#125;&apos;,</span><br><span class="line">        repo: &apos;&#123;&#123; theme.gitment.github_repo &#125;&#125;&apos;,</span><br><span class="line">        &#123;% if theme.gitment.mint %&#125;</span><br><span class="line">        lang: &quot;&#123;&#123; theme.gitment.language &#125;&#125;&quot; || navigator.language || navigator.systemLanguage || navigator.userLanguage,</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        oauth: &#123;</span><br><span class="line">        &#123;% if theme.gitment.mint and theme.gitment.redirect_protocol %&#125;</span><br><span class="line">            redirect_protocol: &apos;&#123;&#123; theme.gitment.redirect_protocol &#125;&#125;&apos;,</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;% if theme.gitment.mint and theme.gitment.proxy_gateway %&#125;</span><br><span class="line">            proxy_gateway: &apos;&#123;&#123; theme.gitment.proxy_gateway &#125;&#125;&apos;,</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            client_secret: &apos;&#123;&#123; theme.gitment.client_secret &#125;&#125;&apos;,</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">            client_id: &apos;&#123;&#123; theme.gitment.client_id &#125;&#125;&apos;</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">    gitment.render(&apos;gitment-container&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>配置完成后，<code>hexo g -d</code>，需要等待一会才会好。</p><h3 id="初始化评论"><a href="#初始化评论" class="headerlink" title="初始化评论"></a>初始化评论</h3><p>每篇文章第一次评论时，都需要点击一次<code>初始化本文的评论页</code></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitment </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu压缩文件到windows上乱码问题</title>
      <link href="/2014681399/"/>
      <url>/2014681399/</url>
      <content type="html"><![CDATA[<p>修改/etc/default/locale文件<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_NUMERIC=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_TIME=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_MONETARY=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_PAPER=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_NAME=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_ADDRESS=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_TELEPHONE=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_MEASUREMENT=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_IDENTIFICATION=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>grub和grub-rescue启动ubuntu并修复启动项</title>
      <link href="/314144721/"/>
      <url>/314144721/</url>
      <content type="html"><![CDATA[<p>ubuntu启动进入grub或者grub-rescue下，启动项修复<br><a id="more"></a></p><h3 id="grub启动修复"><a href="#grub启动修复" class="headerlink" title="grub启动修复"></a>grub启动修复</h3><p>先加载启动文件进入ubuntu<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set root=(hd0,8); (可以通过root来查看硬盘分区,root (hd0,x)查看分区格式,找到ubuntu启动项所在分区)</span><br><span class="line">kernel /boot/grub/i386-pc/core.img;</span><br><span class="line">boot</span><br></pre></td></tr></table></figure></p><h3 id="grub-rescue启动修复"><a href="#grub-rescue启动修复" class="headerlink" title="grub-rescue启动修复"></a>grub-rescue启动修复</h3><p>同样的，先加载启动文件进入ubuntu<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set root=(hd0,8); (可以通过root来查看硬盘分区,root (hd0,x)查看分区格式,找到ubuntu启动项所在分区)</span><br><span class="line">set prefix=(hd0,8)/boot/grub</span><br><span class="line">insmod /boot/grub/i386-pc/normal.mod #或者insmod normal或者insmod /grub/normal.mod. 一般来说，肯定有一个不会出错</span><br><span class="line">normal</span><br></pre></td></tr></table></figure></p><p>进入ubuntu后，执行下面两条命令就可以修复启动项了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br><span class="line">sudo grub-install /dev/sda</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> grub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu扩容</title>
      <link href="/3164053385/"/>
      <url>/3164053385/</url>
      <content type="html"><![CDATA[<p>ubuntu挂载NTFS分区和挂载ext4分区来扩容<br><a id="more"></a></p><h3 id="直接挂载NTFS分区"><a href="#直接挂载NTFS分区" class="headerlink" title="直接挂载NTFS分区"></a>直接挂载NTFS分区</h3><ol><li><p>新建挂载点<code>sudo mkdir -p /windows/sda8</code></p></li><li><p>在/etc/fstab添加<code>/dev/sda8 /windows/sda8 ntfs uid=1000,auto,user,nls=utf8,umask=0027,exec   0 0</code></p></li><li><p>最后执行<code>sudo mount -a</code>就能在/windows/sda8文件夹下直接用这个分区</p></li></ol><h3 id="挂载ext4分区"><a href="#挂载ext4分区" class="headerlink" title="挂载ext4分区"></a>挂载ext4分区</h3><ol><li><p>先要格式化成ext4,可以使用gparted工具,或者<code>sudo mkfs.ext4 /dev/sda8</code></p></li><li><p>新建挂载点<code>sudo mkdir /sda8</code></p></li><li><p>在/etc/fstab添加<code>/dev/sda8   /sda8 ext4 defaults  0  2</code></p></li><li><p>最后执行<code>sudo mount -a</code></p></li></ol>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu14.04 pfp-fpm开机启动</title>
      <link href="/45252325/"/>
      <url>/45252325/</url>
      <content type="html"><![CDATA[<p>ubuntu14.04下设置pfp-fpm开机启动<br><a id="more"></a></p><h3 id="php下载"><a href="#php下载" class="headerlink" title="php下载"></a>php下载</h3><p>下载php的源码，编译好就行，然后找到init.d.php-fpm.in文件，拷贝到/etc/init.d/目录下，名字为php-fpm</p><h3 id="修改php-fpm文件"><a href="#修改php-fpm文件" class="headerlink" title="修改php-fpm文件"></a>修改php-fpm文件</h3><p>找到以下内容并修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prefix=</span><br><span class="line">exec_prefix=</span><br><span class="line">php_fpm_BIN=/usr/local/php5.6/sbin/php-fpm</span><br><span class="line">php_fpm_CONF=/usr/local/php5.6/etc/php-fpm.conf</span><br><span class="line">php_fpm_PID=/usr/local/php5.6/var/run/php-fpm.pid﻿​</span><br></pre></td></tr></table></figure></p><p></p><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d  -f  php-fpm  defaults</span><br><span class="line">sudo runlevel﻿​</span><br></pre></td></tr></table></figure><p></p>]]></content>
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> phpfpm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu pydio在nginx上部署</title>
      <link href="/3766093411/"/>
      <url>/3766093411/</url>
      <content type="html"><![CDATA[<p>ubuntu下使用nginx部署pydio<br><a id="more"></a></p><h3 id="pydio依赖环境"><a href="#pydio依赖环境" class="headerlink" title="pydio依赖环境"></a>pydio依赖环境</h3><h4 id="php5-6安装"><a href="#php5-6安装" class="headerlink" title="php5.6安装"></a>php5.6安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install php5.6  php5.6-curl php5.6-gd php5.6-mbstring php5.6-mcrypt php5.6-mysql php5.6-xml php5.6-xmlrpc php-xdebug php5.6-intl php5.6-fpm php5.6-dev php5.6-cli php5.6-common</span><br></pre></td></tr></table></figure><p>可以通过sudo apt-cache search php5.6来查看php有哪些扩展可以安装</p><h4 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h4><p>官网安装参考链接</p><blockquote><p><a href="http://nginx.org/en/linux_packages.html" target="_blank" rel="noopener">http://nginx.org/en/linux_packages.html</a></p></blockquote><h3 id="pydio部署"><a href="#pydio部署" class="headerlink" title="pydio部署"></a>pydio部署</h3><p>pydio下载地址</p><blockquote><p><a href="https://sourceforge.net/projects/ajaxplorer/" target="_blank" rel="noopener">https://sourceforge.net/projects/ajaxplorer/</a></p></blockquote><p>pydio部署参考链接</p><blockquote><p><a href="https://pydio.com/en/docs/kb/system/installing-debiannginx" target="_blank" rel="noopener">https://pydio.com/en/docs/kb/system/installing-debiannginx</a></p></blockquote><p>注意:和参考中有几点不一样的地方：</p><ol><li>由于nginx.conf配置文件中包含了/etc/nginx/conf.d/*.conf,所以只需要在/etc/nginx/conf.d/目录下添加pydio.conf配置文件，在该文件中进行server配置。</li><li>php版本和参考中使用的不一样，需要对应成自己安装版本即可。</li><li>打开pydio网站首页时，会检测依赖的php扩展是否安装，如果出现warning(警告),可通过sudo apt-cache search php5.6来查找缺失扩展使用apt install进行安装，或者通过pecl进行安装。</li></ol><h4 id="启动ssl需要生成ssl证书"><a href="#启动ssl需要生成ssl证书" class="headerlink" title="启动ssl需要生成ssl证书"></a>启动ssl需要生成ssl证书</h4><p>生成证书：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/ssl/localcerts</span><br><span class="line">apt-get install openssl</span><br><span class="line">openssl req -new -x509 -days 3650 -nodes -out /etc/ssl/localcerts/nginx_pydio.pem -keyout /etc/ssl/localcerts/nginx_pydio.key</span><br></pre></td></tr></table></figure></p><p>添加权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /etc/ssl/localcerts/*</span><br><span class="line">chown -R www-data:root /etc/ssl/localcerts</span><br></pre></td></tr></table></figure></p><p>最后在pydio的配置文件添加<br>找到 listen 443 ssl;在该行下面添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate     /etc/ssl/localcerts/nginx_pydio.pem;</span><br><span class="line">ssl_certificate_key /etc/ssl/localcerts/nginx_pydio.key;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> pydio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> nginx </tag>
            
            <tag> pydio </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu apache2启用python-cgi</title>
      <link href="/2740217651/"/>
      <url>/2740217651/</url>
      <content type="html"><![CDATA[<p>ubuntu下apache2启用python-cgi<br><a id="more"></a></p><h3 id="安装apache2"><a href="#安装apache2" class="headerlink" title="安装apache2"></a>安装apache2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br></pre></td></tr></table></figure><h3 id="在apache2-conf中添加"><a href="#在apache2-conf中添加" class="headerlink" title="在apache2.conf中添加"></a>在apache2.conf中添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ScriptAlias /cgi-bin/ /var/www/cgi-bin/</span><br><span class="line">&lt;Directory &quot;/var/www/cgi-bin/&quot;&gt;</span><br><span class="line">   AllowOverride None</span><br><span class="line">   Options +ExecCGI</span><br><span class="line">   Order allow,deny</span><br><span class="line">   Allow from all</span><br><span class="line">   AddHandler cgi-script .py</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h3 id="启用cgi"><a href="#启用cgi" class="headerlink" title="启用cgi"></a>启用cgi</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod cgi</span><br></pre></td></tr></table></figure><h3 id="将python脚本放在-var-www-cgi-bin-目录下，并赋可执行权限"><a href="#将python脚本放在-var-www-cgi-bin-目录下，并赋可执行权限" class="headerlink" title="将python脚本放在/var/www/cgi-bin/目录下，并赋可执行权限"></a>将python脚本放在/var/www/cgi-bin/目录下，并赋可执行权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 *.py</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> apache </tag>
            
            <tag> python-cgi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu apt代理设置</title>
      <link href="/1368529979/"/>
      <url>/1368529979/</url>
      <content type="html"><![CDATA[<p>编辑/etc/apt/apt.conf文件<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Acquire::http::proxy &quot;http://&lt;proxy&gt;:&lt;port&gt;/&quot;;</span><br><span class="line">Acquire::ftp::proxy &quot;ftp://&lt;proxy&gt;:&lt;port&gt;/&quot;;</span><br><span class="line">Acquire::https::proxy &quot;https://&lt;proxy&gt;:&lt;port&gt;/&quot;;</span><br></pre></td></tr></table></figure></p><p>出现以下错误时:</p><blockquote><p>Packages  server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none</p></blockquote><p>在/etc/apt/apt.conf添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Acquire::https::packages.cloud.google.com::Verify-Peer &quot;false&quot;;</span><br><span class="line">Acquire::https::apt.dockerproject.org::Verify-Peer &quot;false&quot;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> apt-proxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu添加可信证书</title>
      <link href="/2735220453/"/>
      <url>/2735220453/</url>
      <content type="html"><![CDATA[<p>ubuntu下添加可信证书<br><a id="more"></a></p><h3 id="添加证书"><a href="#添加证书" class="headerlink" title="添加证书"></a>添加证书</h3><p>证书(扩展名为crt)复制到<strong>/usr/local/share/ca-certificates</strong>文件夹然后运行update-ca-certificates<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp zhengshu.crt /usr/local/share/ca-certificates</span><br><span class="line">sudo update-ca-certificates</span><br></pre></td></tr></table></figure></p><h3 id="删除证书"><a href="#删除证书" class="headerlink" title="删除证书"></a>删除证书</h3><p>将<strong>/usr/local/share/ca-certificates</strong>对应的证书删除，然后执行update-ca-certificates<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -f /usr/local/share/ca-certificates/zhengshu.crt</span><br><span class="line">sudo update-ca-certificates</span><br></pre></td></tr></table></figure></p><p>参考链接:</p><blockquote><p><a href="http://yaxin-cn.github.io/Linux/add-root-certificate-in-ubuntu.html" target="_blank" rel="noopener">http://yaxin-cn.github.io/Linux/add-root-certificate-in-ubuntu.html</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo生成tags链接</title>
      <link href="/3741088398/"/>
      <url>/3741088398/</url>
      <content type="html"><![CDATA[<p>hexo生成tags链接<br><a id="more"></a></p><h3 id="新建tags页面"><a href="#新建tags页面" class="headerlink" title="新建tags页面"></a>新建tags页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><h3 id="编辑tags文件夹下的index-md"><a href="#编辑tags文件夹下的index-md" class="headerlink" title="编辑tags文件夹下的index.md"></a>编辑tags文件夹下的index.md</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2018-04-05 14:58:23</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><h3 id="启用themes-next-config-yml文件中的tags，如下"><a href="#启用themes-next-config-yml文件中的tags，如下" class="headerlink" title="启用themes/next/_config.yml文件中的tags，如下:"></a>启用themes/next/_config.yml文件中的tags，如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  tags: /tags/ || tags</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu添加静态ip和dns</title>
      <link href="/3414172487/"/>
      <url>/3414172487/</url>
      <content type="html"><![CDATA[<p>ubuntu下添加静态ip和dns<br><a id="more"></a></p><h3 id="添加静态ip"><a href="#添加静态ip" class="headerlink" title="添加静态ip"></a>添加静态ip</h3><p>修改/etc/network/interfaces文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auto eth0 </span><br><span class="line">iface eth0 inet static </span><br><span class="line">address 192.168.0.117 </span><br><span class="line">gateway 192.168.0.1 </span><br><span class="line">netmask 255.255.255.0 </span><br><span class="line">network 192.168.0.0 </span><br><span class="line">broadcast 192.168.0.25</span><br></pre></td></tr></table></figure></p><h3 id="添加dns"><a href="#添加dns" class="headerlink" title="添加dns"></a>添加dns</h3><p>编辑/etc/resolvconf/resolv.conf.d/base，这个文件默认是空的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/resolvconf/resolv.conf.d/base</span><br></pre></td></tr></table></figure></p><p>配置dns<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8 </span><br><span class="line">nameserver 8.8.4.4</span><br><span class="line">``` </span><br><span class="line">保存，然后执行</span><br><span class="line">``` </span><br><span class="line">sudo resolvconf -u</span><br></pre></td></tr></table></figure></p><p>查看/etc/resolv.conf，最下面是否多了2行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8 </span><br><span class="line">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure></p><h3 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h3><p>sudo /etc/init.d/network restart</p>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> ip </tag>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
